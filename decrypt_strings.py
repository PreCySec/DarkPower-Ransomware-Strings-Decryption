import os
import binascii
import hashlib
from base64 import b64decode, b64encode
from Crypto.Cipher import AES
from Crypto.Util import Counter


DARK_POWER_ENC_STRINGS = [
 'ACCd52HjIgmOUHA=', 'o0Jadnu9I3l2OA==', '6Ge6/uXQt2ywVWjb', 'mWOyxZV0Kq0g', '1jXvKm9HBcsM', 'f3lMgKzNZ2GfnMjtTiyi', 't0DAA5Wg4FIbgiw=', 'oajXKubSyQ==', 'wm+yWvFULv13', 'AbqNKqr6D9aDMqk=', 'lI8ZjIUAgdRv', 'l8HiOUkJ8v1ILuM=', 'NbC0pB1W1IytOqY=', 'hm4/fY3TrbN4KQ==', 'M9om2cZ08BsS', 'amixw/jXbo78YnRLcumwSw==', 'uII9VsoFNokjk7Y26Jo=', 'D7xv1li/kvqf5iSwuizY', 'wX/aUEDZ72XUFHeH', 'iM+Ey5Vw6/LW3CMU', 'DBMSZZ6GZN1/xdKi/4AmiSBNP10=', 'XM6cxW6ds3G/QGA=', 'jFPPVYT0VfrFBw==', 'e/FULrsJc8Z7tUOr5zkwqxpe', 'Pqb3wDD9/5OK2Pg=', 'Bhcl405/NE2FMvrdQ4+r', 'RTqEWl7Waohn4qqS', 'O8dFhtGMj07B', 'M4UQrk2RzauVLQ==', 'mCAAxRLCZ4ZSpOk=', 'p+ue2BCO3n0AGRTmDA==', 'Z/j/A4I=', 'MKGIisFb', 'xDXK', 'Wbdi1bA=', 'UrNYNcH1', '9qfc', 'JXjlyk07', 'obl0BA==', 'h+Itw08Y', 'Zdd9xw==', '+srR5xo=', 'HPoFf/vlAcqhgQ==', 'mKv21A==', '7nQFrw==', '2WPKKbRvgrMy7kkn', 'Rs6Yja0=', '2OfDog==', 'juPPo1g=', 'hcUOf3w=', 'Ry67FA==', 'Ls2bcQ==', 'IVZTsh0=', 'vxc3MWak', 'gnyXFg==', 'ucrvmA==', 'Et8Nig==', 'DE5h1w==', 'AGZ0aQ==', 'q+w4Bg==', '2IuUnw==', 'tmLe2A==', 'Qq9gtA==', '0S7Ehg==', 'C3x7ug==', 'VyUu3Q==', 'i5szU3eQs8j3fU2D3Eg=', '50gC/lLIVrg=', 'ibkNrA==', 'PNU0mA==', 'oujWrQ==', 'BrZkdQ==', 'cBm6/A==', '7LDVuA==', 'Eoh5YkpIMHs=', 'xvacgQ==', 'qBegkg==', '0fDslQ==', 'Pt+LaQ==', 'f31kpw==', 'BUT7sg==', '6MRY1Q==', '+HUqVA==', 'EcJaPA==', 'GA8j6E62n2k=', 'wwzyJA==', 'V7q3Cw==', 'YpeceQ==', '3OEPSg==', 'uslnxN0Hze2ZqQ==', '7W0e8Z5T6d4o', 'y1B+DQ==', 'zFRkp2g=', 'LE15/g==', 'anPtyA==', 'M4ax9Q==', '4K3iHwGKSis=', 'q4Gp8g==', 'K7vzjQ==', 'VMeErSjfz6tqxQ==', 'XBI0Hl0D', 'vaqVt00=', '9pnikdaXlYsn', 'zil19ZIrBW/+ojQ7', 'PW0bXk5hLFSnq1Y=  3fvSzpAOzGtU95RkEeM=', 'ex6+jSJvC88=', 'McxRrmHxSRWV4vDk', 'whP+9ljT8/+/iYLV', '05eZWaRecNjsUA==', 'kJiK8MrJBK7PaQ==', 'j4SNW3SaFdCKGfQ=', 'rvYroaTPbN/YhQnAaQ==', 'x5oBQJL7lg==', 'z1Gh8PE5vg==', 'VlnjVLV8KyQZKDF2', '7y0aYkApZTSkwRzj3rpGPg==', 'fnTaZ7dt2axDOw6U', 'ayV+FcGW', 'v96gFRD3vpjYk5Cs', '6pk0AhTcYI08Qq4=', 'Alf3gQhlYFAapYY=', 'x2SfauVHg7WF8SA3TzKBT6beOCgsbwkMlA==', 'NuGGfuDteOLNZVwpFCq++oP/cA==', 'MVLN4Q==', 'slA0cVNjaLozXnE=', 'p4ur/FauHg==', '4gFOgpk=', 'YxU9Ao27dos=', 'uSbvcjqAGTE=', 'Yon+wV/58zyrfUkjKg==', '4Z5f7K3BaqF+', 'gkBGwuhlKUmvpBT01A==', 'HbdyXjcV3JsY6AM=', 'pJ9n', 'rn6rSlsc14iaLbaL1QAPWUSDQxc=', 'POseXCcrJRRvzc7KwA==', 'sSEfyrM4TQ==', 'bkWZZHy/zhQHJxI=', 'LP7y', 'enUAfHU=', 'z402qPjI', 'ygDG', 'iXlQkUlqGKCbAhkdFLFWKVW/LYvNPcuEuatJBG+OKQ==', '2g==', 'gK4lZ3SF5Zsm', 'fn8+BQ==', 'aPY=', 'CUbX8Fw=', 'KwyGfg==', 'x0A7gsjxzPVMm7/jbUo=', 'fKrt0tY6Ye2dgPqhjekftfM=']

DARK_POWER_IV_TABLE = [
 b'\xac\x9a\xe2\xa2\x3b\x33\x79\x50\x3a\x1b\x9e\x59\x19\x09\xd0\x3c', b'\xe8\xaa\x87\xa3\xc3\xbf\xe8\x1a\x71\xeb\x14\x3f\x31\x8d\x2e\xdc', b'\x36\x60\xf6\xc2\x85\xba\x1e\xb6\x59\xe3\x20\x75\x60\x42\x00\xa0', b'\x7b\x7e\x86\x25\x0d\x3f\xd9\x08\x3f\xd9\x4c\xca\x9f\xf4\xc6\xe1', b'\xca\x95\xdf\x2b\x25\xe1\x2d\x1f\x09\xa1\xc6\x68\xc5\x5b\x02\xba', b'\x8c\x65\x2b\x83\xdd\xc1\x86\x1c\x00\xb1\x08\x3a\xc1\x8a\xbc\xa0', b'\x95\x47\x2d\xb3\x04\x51\x0d\x2f\x1e\xec\x6f\x88\x02\x94\x5e\xd0', b'\x6e\x50\xeb\x1a\x37\xfe\x0f\xe1\x16\x8a\x40\xd1\x8c\xd2\x19\x18', b'\xd0\x38\x36\xce\xf1\xaf\xa3\xf4\x5f\x5a\xd5\x58\x36\xbf\x59\xba', b'\xc4\x65\x2a\x1a\x68\x87\xf4\x5d\x51\xff\xbb\xd6\x48\x5e\xf7\xd7', b'\xa8\xb1\x09\x0e\xcf\x67\x41\x69\x8b\xcc\x2f\x12\x34\x1f\xc8\xa3', b'\x35\x55\xe5\xa1\x17\x31\xdd\x32\x53\x1b\x66\x4b\x8b\x8a\x13\x38', b'\x76\xf5\xcd\x05\xca\x5e\x95\x5e\x7a\xf9\xe8\xca\x97\x90\xb5\x3e', b'\x4d\xfb\xa9\xac\x9c\xcc\x35\x10\x7e\x75\x5f\x02\x6d\x00\x13\x7c', b'\x5f\x6d\x96\x61\x8d\x77\x75\xba\xbf\x0b\x65\x32\xc8\x3b\xd0\x93', b'\x35\xfd\x99\x9f\xa4\x78\x0d\x59\x59\x62\x59\xc4\xdc\x7d\x05\x3e', b'\x5f\xa1\x9c\xd6\xc8\x2e\x1b\xf0\xa2\xd3\x4e\x59\xa1\xba\x98\x31', b'\xa6\x3a\x4c\x00\xdf\x60\x37\x3f\xf0\x2f\xc4\xc4\x8c\x5c\x51\x98', b'\x1a\x87\x03\x40\x05\x1c\x8a\x24\xcd\xe7\x10\xe8\x7b\x61\xea\x96', b'\x93\xcf\x97\x8d\xa5\x57\x80\x3b\xc9\x75\x92\x4d\x68\x5e\x30\xe5', b'\x83\x5a\x7a\x53\xda\xcd\x2c\x83\xee\x47\xdc\x09\x95\x99\x01\x1e', b'\x8e\xf5\x4e\x35\x58\xfd\x64\x66\x6d\x0f\x02\x31\x11\xd1\xc6\x00', b'\xc9\x27\x71\x6f\x61\x16\x32\x78\xcd\xbc\x27\x2d\xd6\x0a\x92\x5e', b'\x99\x69\x04\x9b\xdf\x50\x2a\x71\x93\xeb\x22\x66\x55\xc8\x00\x99', b'\xbf\xc9\x3e\xb3\x5f\x2d\xde\x77\x76\x08\xd7\x3d\xc9\x90\x7b\xdc', b'\x09\x26\x22\xac\xb8\xe1\xf4\x21\x14\xe0\x44\xec\xe1\xc6\xa7\x26', b'\xa3\x59\x90\x21\x6b\x3b\xe7\x68\xd7\x33\xf8\xc2\x84\xe8\x38\x74', b'\xbe\xa5\xe7\xb2\x46\xa9\xa4\xf2\x69\xed\xef\xc2\xbc\x9c\xc8\xff', b'\x31\x3d\x41\x6f\x08\xcd\x72\xa1\x2e\x8c\xe3\x09\x72\xf1\xd8\x67', b'\x77\xc5\x16\x62\x7c\x20\x42\x1c\xda\x02\xbc\x6a\x54\x07\x9c\x04', b'\x88\x58\xf1\xe9\x07\x7e\xaf\xa6\x80\x91\x14\x8d\x56\x06\x24\x0c', b'\xa7\x5a\xff\x0e\x41\x55\x6a\xd3\xbb\x37\x10\x0d\x09\xc2\xce\x34', b'\xff\xd2\x7c\x02\x00\xe4\x12\xa7\x93\x16\x36\x4b\xab\x9d\x5f\xc6', b'\x71\x63\x92\xb7\xfb\x5a\x63\xa2\xd8\xe9\x44\x63\x59\x97\xeb\xfd', b'\xa6\x18\x68\x8a\x0c\xd5\x4e\x02\xf5\x91\x68\x67\xdb\xff\x95\xdc', b'\xdc\x60\xdf\x88\x58\x11\x70\xe2\xe0\x00\x0e\xe3\xc3\x81\xa3\x9b', b'\x40\xe4\x06\x66\x04\xa4\x62\x5f\x35\xd2\x8e\xa4\x39\xed\xaa\x81', b'\x27\x37\xb1\x40\x50\x3c\x4b\x02\xcc\x12\x1a\x0d\x1f\x82\x6e\xcc', b'\x55\x39\x39\x54\xb0\x20\x38\x86\x3d\x02\x90\x02\x64\xfe\x3f\x71', b'\x41\x3f\x9f\xf8\xbc\x5a\x70\xaa\x37\xb4\x56\x12\x5a\xbb\xec\xec', b'\x63\xf0\x81\x94\x97\x4a\xec\x15\x72\xe8\xb9\xb1\xb4\xcf\x9e\x16', b'\x86\x2e\x1f\x4d\x75\x17\x2d\x1b\x37\x6d\x18\xe9\x16\x96\x8c\x2d', b'\x95\x9a\xb8\xce\xe3\x24\xd1\x71\x1a\x84\x6f\xe8\x1f\xe9\x84\xc6', b'\x7d\x01\xdf\xf1\x39\x73\xbe\x81\x55\x36\xc6\x21\xe3\xcb\xc1\x61', b'\x9d\xc0\x63\x62\xde\x8a\xa4\x51\x0f\x10\x12\x44\xfb\x6f\xed\x39', b'\x83\xa9\xf7\x8f\x04\xe5\x4e\xfe\x1e\x8c\xe4\x57\x8c\xb8\x2f\x2d', b'\x6b\x68\xdc\xfb\x80\x84\x98\xac\xd2\xd0\x6e\xec\xb2\x0f\x95\xbe', b'\x14\x3c\x84\xa8\x45\x4b\xe1\x50\xa0\xce\xce\x95\x4b\x8e\xbe\x96', b'\x4f\x2a\xea\xf4\xa9\x15\xc0\xfc\x4a\x18\x92\xb1\xc1\xe5\x73\x78', b'\xc2\x85\x54\x96\xf7\x69\xc3\x74\xec\xf0\xaf\x98\x82\xb8\xa4\x88', b'\x3b\x28\xa0\x46\x2a\xd4\x7b\x80\xaa\x23\xad\xf9\xfd\x02\x7d\x16', b'\xc2\x31\x02\xc9\xe8\xe0\x7d\x9f\x3a\xd7\x29\x5f\x30\x89\xea\xb5', b'\xff\x2a\xcf\xa6\x0e\x21\x39\x2d\xfc\x25\x10\xe9\xb9\xc3\xe1\x62', b'\x34\x51\x5e\x24\x50\x6f\x67\xd1\xfa\x46\xc5\xa5\x03\xb3\xe8\x8d', b'\x58\x29\x8d\x7f\x12\x38\xe9\xf1\x01\x5a\x4e\xb2\x08\xe1\x23\xe0', b'\x7c\x38\xf8\x5b\xd3\xae\x95\xa1\x65\x18\x15\xa3\x3f\x3e\x06\x41', b'\x9b\x07\xf9\x33\x76\x8a\x17\x6b\xb3\xe3\x39\x22\xb8\xcc\x30\x5e', b'\xe6\xa4\xb3\x21\xe2\x3c\xbd\xf8\x98\x66\xf6\x80\x20\xfd\x96\x38', b'\x97\xb4\x6b\x54\xfc\xa2\x00\xc3\x4d\x55\xfc\xc2\xbf\xdf\xe1\x92', b'\x45\xaa\xf9\x73\x3d\xd6\x93\xb1\x4a\xd0\x90\x1b\xbe\xd1\x7e\x75', b'\x51\x43\x37\x4f\x06\xb8\xdd\x95\x96\x35\xcb\xb8\x91\xc2\xf0\x61', b'\xb1\x44\x70\x34\x28\x59\x19\x79\x19\x5d\x5d\x97\x51\xf5\xce\x10', b'\x9e\xd0\xd0\x8d\x43\x97\x48\x98\x43\xc9\x85\xf9\xff\xb0\xc1\xce', b'\x42\xfa\x1b\x02\xd1\x78\xcc\xd8\x20\x31\x15\x1c\xbf\x99\xf2\xb8', b'\xd0\xed\x5d\xc0\x5d\x6f\x7c\xee\x6c\xde\x6a\xd7\x7d\x49\xe0\x7b', b'\x0c\xc8\x1b\x33\x73\x75\xf1\xb5\xf5\xa3\xd3\xfe\x6c\x9e\x13\xe3', b'\x74\xc3\x7a\x9b\x1e\x95\x6d\xa6\x87\x20\x2b\x7a\xf8\x9a\x93\xb6', b'\xd4\x9e\x72\xa8\xd6\x03\xff\x97\x84\x7f\x3e\xa8\x8b\x53\x2b\x7a', b'\xcc\xd6\x0f\xde\xaa\xcd\x05\x33\x1a\xc6\x04\x4e\xb6\xea\xee\x1e', b'\x99\x4b\x88\x6b\xa0\x78\x87\x02\x0e\x23\x01\x36\x49\x79\x9d\x42', b'\x30\xd6\x1a\x35\xd8\xd8\xfa\x6b\x6e\x27\x47\xf1\xa6\xa8\x59\xe4', b'\xb4\xd8\x42\xd3\x07\xe8\xd6\x1e\xb7\x72\xf5\xbd\x77\x23\x8e\x11', b'\x22\x31\x2e\x8b\xfb\x0f\xfd\xe4\xf9\xff\xd0\x99\xe9\xdb\xf2\x59', b'\xa6\xfd\x51\x27\x8e\xeb\xe1\x97\x99\x14\xe9\x56\xfe\xaa\xb5\x15', b'\xaa\x68\x6c\x16\x3e\x03\x22\x86\xa2\x6e\x20\xbd\xd3\x95\x40\x6e', b'\xc1\xd2\x36\x8d\x33\x84\x6c\xc2\xca\xfa\x05\xcd\xf6\x45\xce\xdf', b'\xba\xb0\xd2\x0f\x68\xee\x56\xbc\xbf\x86\x96\xe1\x10\x31\xf0\x25', b'\x0e\xb0\xb1\x6b\xa8\x50\xb8\x75\xf4\x3c\xf0\x78\xb5\xfc\x77\x79', b'\x14\x40\xbc\x24\x7a\xba\x8c\x1f\x68\xce\x8e\xe8\x9b\x55\x8d\x59', b'\xe1\x52\x4b\xe3\x6c\xc5\xdb\x7e\x9c\xdf\xf5\xd7\x4c\x06\xb3\xc3', b'\xee\x08\xf4\xfb\xef\x10\xd5\x07\x98\xbb\x08\xab\x42\xb8\xdf\x44', b'\x9b\x01\x21\x8e\x4b\xb5\xe4\x0c\x03\x31\xb6\xa3\xc2\x5e\xfa\x6a', b'\x3e\x64\xef\x29\xdd\xaa\x4b\xd0\x1a\xbf\xe3\x8a\x39\xae\xb3\x9f', b'\xee\x4a\x1e\x63\x28\x55\x48\x21\x6b\xb7\x85\x0c\x33\xd0\x82\x19', b'\x36\xeb\xd2\x56\xbe\x33\xcb\x41\x2c\x03\xfa\x3e\x21\x52\xcc\xa1', b'\x4c\x0d\x37\x54\xdf\xd3\x58\xf7\x43\x33\x64\x1b\x9c\xe6\x9b\x47', b'\x10\xc8\x3c\x32\x3c\xdc\x00\x3c\xdc\x4e\xe8\xe0\x17\x4e\x4a\xb0', b'\x1b\x4d\x56\xe4\x7f\x7b\x30\x5b\x2b\x37\xec\x31\x7e\x7c\x21\x0c', b'\x3e\xa3\x31\x60\x98\xc1\xa0\x22\xa5\xef\xbf\xa2\xb2\x84\x55\xeb', b'\x20\x81\x02\xf2\x50\x47\x6e\xd5\xc3\x1e\x1a\xed\xad\xde\x0e\xc9', b'\x36\x16\x8f\x79\x7b\xdd\x23\x03\x24\xe7\xba\x2e\x8b\xad\xe5\xfb', b'\xc0\x55\xeb\x72\xa4\xed\xfc\x97\xdb\x1d\xe2\x96\x92\xba\xe3\x8b', b'\x5f\x20\x5d\x2d\x3f\x95\x05\xae\x4d\xf8\x3d\xea\x22\xb0\x1c\xf5', b'\xba\xbf\x3d\x49\x28\xc1\x5c\x03\x71\x1e\xd3\xc9\xa7\xb7\xb5\x2b', b'\x9b\x5b\xae\x49\x6c\xbb\x6f\xf2\xc7\xdd\x73\x0a\xce\x6b\x40\xf7', b'\x3b\xa4\x11\x8c\x7a\xf2\x31\x82\x3e\x4a\x37\x2b\xc2\xdc\xaf\xf7', b'\x00\xa8\x4a\x0e\x4b\xb0\xf0\x76\x97\xab\x73\x29\x7c\xe0\xf5\x83', b'\xa0\x6d\x57\x06\xec\xd4\x1d\xfc\xaf\x00\x69\x40\x33\x3b\xf7\x33', b'\xb7\xc5\x79\xc7\xa2\xc4\xec\x55\x0f\x53\x41\x94\x49\x40\xe7\x58', b'\x30\x20\xca\x14\x5e\x63\x04\x1b\x7f\xbd\xcf\x3c\x5d\x3b\xa4\x8f', b'\x19\x59\xe4\x11\x81\x81\xbc\x23\xb7\xa2\x9c\x9c\x84\x7d\x66\xf5', b'\x0d\x8a\xe8\xfe\xef\x8a\xcf\x0a\xff\x21\x7f\xc8\xfa\xaf\xa4\xb4', b'\x16\x17\xe7\xaa\x87\x08\x0b\xfc\xca\x6b\xcc\x10\x67\xff\x7a\xb6', b'\x8f\x48\xc5\x9e\xd6\x9a\xb5\x8b\xdd\xa8\x99\x4a\x65\x0d\x7e\x8e', b'\x10\x02\x7f\x70\x3e\xa7\x76\x02\x57\xc9\xf3\xdd\x2e\x38\x9e\x08', b'\x5b\x7e\x8f\x88\x18\xa2\x94\x93\x72\x6b\xed\x2d\x3f\x9f\xda\x5c', b'\x32\x93\x7e\xd0\xe7\xdd\x5f\xda\xb1\xf6\xfa\xc8\xbc\x03\xf5\x67', b'\xfb\x93\xab\x54\x06\x15\x7d\xa8\x8c\x64\x64\xc9\x7f\x90\x1c\x93', b'\x09\x05\xba\xdc\xdd\x90\x8d\x91\xd3\xd8\x01\x40\x4d\x1a\xbd\x34', b'\x09\xa3\xa6\x45\x10\xbc\x55\x3a\x92\x32\x49\x09\xd2\x5f\x51\xa4', b'\xe9\xed\x0c\x6e\xd2\xc8\x28\x57\x63\x2d\xe8\xf9\x53\x79\x1c\x2b', b'\x41\xb3\xf4\xeb\x68\x7c\x4b\x3f\xc9\x3a\x23\xcc\xa3\x01\x6d\x74', b'\x40\xb5\x3d\x6f\x68\x54\xbb\x91\x1d\x92\x49\x0f\x5e\x3e\xbf\xdf', b'\x76\xd2\x9a\x1a\x54\xdb\x4c\xde\x5e\xd6\x47\x62\x49\x3d\x3e\x74', b'\x59\x28\x05\xec\x0e\x40\x89\x9d\x60\x1c\x26\xbd\x43\x74\xdf\xa9', b'\xb4\xaf\x67\x5a\x9e\xa6\xb5\x04\x75\x37\xc8\x86\x40\xbd\xce\x8d', b'\x3b\xa2\x17\xce\xd3\x00\x54\x51\x15\x45\xe4\x02\x22\x94\x92\xaa', b'\x38\x62\xe1\x73\x6a\x92\xdc\xd9\xab\x0d\xa8\x23\x97\x22\x01\x5b', b'\x91\xf5\x76\x5d\x21\x3f\xc2\x08\x04\x94\xba\xee\x59\xac\xcd\x3f', b'\x11\x4c\x4e\x59\x9b\x76\x00\x9c\x36\xfe\x90\x9d\x37\x22\x1e\x7a', b'\x3c\x82\x48\xf6\x51\x56\x7a\x08\xd0\xa2\x95\x15\xb0\x0a\x46\xb1', b'\xa6\x72\x5d\xe0\xeb\x7f\x1d\x50\x8b\xfc\xbe\x77\x9b\xde\x79\x8c', b'\x50\xbe\xe0\x37\x2b\x41\x15\x77\xc1\xd3\x9d\x22\xba\x00\xfb\xa6', b'\x88\x01\xdb\x0c\x60\x2b\xeb\x0a\x4b\x23\x7e\xf6\xc5\x13\x0e\x83', b'\x17\x97\xb9\x58\x4a\x9a\xac\x8d\x32\xc5\x4c\x78\xd1\x65\xb9\xa2', b'\x8a\x28\x69\x2c\x7e\x38\x89\x09\xbf\x69\x29\x40\xbb\x17\x0f\xc6', b'\x9c\x62\xb6\x65\xd0\x42\xa5\xa0\x5d\x97\x86\x54\x11\x86\x4c\xea', b'\x96\x2d\xc2\x8b\xd5\xed\xba\xba\xf5\xae\x5e\xc0\xda\xc5\xc8\xde', b'\xbd\xa9\xfd\xf4\xf5\x18\xbe\x91\xfc\x7d\xc3\x3e\x63\x79\xfe\x00', b'\xfb\xe2\xfd\x63\xac\x9e\xa4\xfe\x85\x53\x34\xb3\x2e\x83\x75\x53', b'\x51\xf8\x38\x1b\x92\x49\x55\x32\xb9\x87\xee\x09\x1b\xa3\xeb\xc2', b'\x54\x7b\x54\xdd\x29\xd4\x97\x91\xbf\x7c\x8c\x8b\x25\x87\xbc\xf5', b'\x1f\xb8\x5c\x2d\x65\xb1\xda\x40\x39\x97\xd3\x40\xc0\xcd\xb4\x02', b'\xd6\x9d\xd1\x41\x5b\xc3\xff\xa6\xc4\x72\x24\x07\x56\x77\xbf\x66', b'\x80\x91\x4b\x37\x3c\x39\xe6\xe0\x3f\xde\x38\x27\x60\xae\xe9\x80', b'\x9c\x5f\xd1\xa9\xdb\x42\xcf\x1f\x39\xe1\xad\x3d\x84\x97\xe2\x0f', b'\xb7\xba\xa4\x71\x17\x62\x8f\x6a\xb1\x73\xa0\x4b\x17\x2a\xa8\x6f', b'\xbf\x80\x87\xd3\x60\x42\xcc\xf0\x6e\xb2\xb9\xde\x03\xa2\xc6\x6b', b'\xb4\xe5\xe3\x6e\xcc\x70\xac\x6f\x3b\xae\xfa\xca\x50\xba\x6f\x7a', b'\xc2\x79\xc2\xbb\x0f\xe5\xd9\xce\xa4\x18\xd7\xc4\x32\xa3\x01\xd3', b'\xf1\xfe\x1d\xc4\xeb\x61\x5e\x4a\xf9\xb6\x86\x35\x9e\x55\x26\x5c', b'\x2a\xf5\x28\x2c\x28\x21\x9a\x70\x60\x79\x2f\xac\xd2\xa9\x03\xdf', b'\xa8\x78\xa3\xd0\x35\xe3\x65\xa5\x93\x65\x86\xd2\x8f\xd1\x2e\xdf', b'\x78\xf1\x1e\x4d\x6d\xd7\xf0\x6d\x6f\x58\x59\xc5\xbf\x3b\x8f\x3f', b'\x3d\xb3\x73\x47\xde\x60\x1e\x99\x74\x66\x1e\xee\x73\x66\xee\x35', b'\xe0\x76\xfb\xdb\xe2\x2c\x99\x1d\x21\x5b\x2f\x80\xa7\x6d\x77\x83', b'\x9a\x37\x3a\xbb\xec\x10\xba\xd6\x16\x3b\x7a\x30\x42\xfe\x1f\x7c', b'\xcf\x63\xc3\x25\x4a\xf1\xfc\x65\xcb\x4f\xbd\xce\x04\x49\x42\x45', b'\x2d\x12\xb7\x9d\x3d\x78\x2c\x29\x68\x96\x8c\x58\x3d\xeb\xf1\x0c', b'\x4d\xfb\x51\x69\xb7\x37\x6f\x30\x7f\xd8\xb0\xc0\xca\x8a\x3f\x93', b'\x83\xc9\x04\xe5\x5f\xf3\x1d\xdb\xb0\x1f\xad\x67\x10\xaf\x8c\x20', b'\xe2\x53\xfc\xa5\x68\x79\x55\xf2\x8d\xdb\x60\xdb\x0b\x91\x35\xcc', b'\xe1\xfe\x94\xc0\x6d\x59\x88\x49\x1b\x7e\x2e\x83\x92\x52\xa3\xaa', b'\xd8\xb4\x12\x2c\xa8\x9c\xab\x32\x57\x48\x0d\xae\x0f\xe7\x15\xe9', b'\x52\x73\x46\x6a\x41\x99\x13\xa3\xfd\x31\x31\x2a\xea\x67\xbb\x9b', b'\xd4\x8d\xe6\xd8\xbf\xdb\xa2\x01\x2e\x39\x45\x05\x8f\xff\x8b\x66', b'\xd8\x7c\xa5\x2b\xa0\x4f\x02\x15\x86\x14\x5b\x8a\xa3\xdb\xf7\xdc']


def int_of_string(s):
    return int(binascii.hexlify(s), 16)


def dark_power_decrypt_strings():

    def is_ascii(s): return all(31 < ord(c) < 123 and 31 < ord(c) < 123 for c in s)

    m = hashlib.sha256()
    m.update(b64decode('Y2IyNzA3MTIwZTZhNDdmZWIxZmQwNjQzNzZhNWE4NDc='))
    key = m.digest()
    # key = b'\x07\x0e\x9d\x3d\xec\xe2\x8c\xd1\x3f\xbc\xc1\xbe\x4f\x28\x8d\xbf\xc5\x2d\xdc\x49\x12\xbe\x4d\x8f\xdb\x09\x7d\xa1\x18\x45\xf8\x76'

    # for base64_enc_string in TEST_STRING:
    for base64_enc_string in DARK_POWER_ENC_STRINGS:
        try:
            ciphertext = b64decode(base64_enc_string)
        except binascii.Error:
            continue

        for iv in DARK_POWER_IV_TABLE:

            ctr = Counter.new(128, initial_value=int_of_string(iv))
            cipher = AES.new(key, AES.MODE_CTR, counter=ctr)
            #decrypted = cipher.decrypt(ciphertext[:AES.block_size])
            decrypted = cipher.decrypt(ciphertext)

            try:
                if is_ascii(decrypted.decode('utf-8')):
                    print("%s|%s|%s" % (base64_enc_string, str(decrypted.decode('ascii')), str(binascii.hexlify(iv))))
                else:
                    continue
            except UnicodeError:
                continue


def dark_decrypt_single_string():

    def is_ascii(s): return all(31 < ord(c) < 123 and 31 < ord(c) < 123 for c in s)

    # for base64_enc_string in TEST_STRING:
    for iv in DARK_POWER_IV_TABLE:

        ciphertext = b"z402qPjI"
        # [ENC]
        m = hashlib.sha256()
        m.update(b64decode('Y2IyNzA3MTIwZTZhNDdmZWIxZmQwNjQzNzZhNWE4NDc='))
        key = m.digest()

        ctr = Counter.new(128, initial_value=int_of_string(iv))
        # cipher = AES.new(key, AES.MODE_CTR, _iv, segment_size=128)
        cipher = AES.new(key, AES.MODE_CTR, counter=ctr)
        decrypted = cipher.decrypt(ciphertext)

        try:
            if len(decrypted) > 2 and is_ascii(decrypted.decode('utf-8')):
                print("%s|%s|%s" % (ciphertext, str(decrypted.decode('ascii')), str(binascii.hexlify(iv))))
            else:
                continue

        except UnicodeError:
            continue


def main():
    dark_power_decrypt_strings()


if __name__ == "__main__":
    main()


